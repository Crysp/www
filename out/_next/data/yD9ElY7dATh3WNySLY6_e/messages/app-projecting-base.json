{"pageProps":{"id":"app-projecting-base","meta":{"title":"Принципы проектирования приложения","publishedAt":"2023-06-17T22:22:00.000Z"},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Структура проекта должна рассказывать о его задачах и самостоятельно показывать, как в проект надо погружаться. При первом взгляде на проект должно быть ясно, какие \", _jsx(_components.em, {\n          children: \"фичи и пользовательские сценарии\"\n        }), \" приложение содержит. Технические аспекты проекта не должны заглушать цели и суть приложения.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Части проекта должны уметь развиваться независимо, а разработку разных фич должно быть реально поделить между разными людьми или командами. Части приложения должно быть можно удалить без страха поломать другие.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Распространение изменений по кодовой базе должно быть ограничено конкретной функцией, модулем или фичей, в которых изменения требовались изначально. Не связанный по смыслу с этими обновлениями код меняться не должен.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Взаимодействие частей проекта должно быть чётким и понятным. Потоки данных должны быть контролируемы, преобразования данных и этапы этих преобразований должны быть явными.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Код и зависимости, участвующие в каждой конкретной задаче должны быть явными. Код, который в задаче не нужен, использоваться и запускаться не должен.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Сторонние инструменты и вспомогательные библиотеки должны иметь чёткую область и границы применения. Удерживать в голове объём кода, который с ними связан и его влияние на проект должно быть ограничено.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Количество неявных входных данных, с которыми работает функция или модуль, должно быть минимально. Объём и размеры данных, ресурсов и зависимостей, которые участвуют в работе должны быть отслеживаемы и измеряемы, чтобы мы могли контролировать их рост и потребление. Внезапные и непропорциональные «всплески» этих ресурсов должны быть легко заметны.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Проект не должен требовать принимать «большие решения», пока мы не изучим предметную область, ограничения и приоритеты бизнеса.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Мы хотим понимать, какие инструменты нам стоит интегрировать в проект. Должно быть очевидно, какие инструменты подходят под нашу задачу, какие есть риски от их внедрения, и какая степень интеграции будет оправдана. Тулинг не должен диктовать принципы работы и создавать неоправданные ограничения для задач, которые приносят деньги.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"На ранних этапах мы хотим избежать лишних обобщений. Обобщения и правила должны выработаться эволюционно, в конкурентной среде, опираясь на пользу, которую они приносят.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Тесты должны ловить регрессии и не должны мешать разработке. Желательно избежать «хрупких тестов», «тестового трения» и «урона от тестов». Тесты должны быть устойчивы к рефакторингу и расширению функциональности.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Кода, который неясно, как тестировать, быть не должно. Каждая часть проекта должна решать чётко определённую задачу, а результат её должно быть просто и очевидно как протестировать.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Инфраструктурный код («клей», который держит всё вместе) не должен переплетаться с бизнес-логикой (которая содержит идеи, приносящие деньги).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Смежные задачи вроде аналитики, интернационализации, перформанс-тулинга также не должны влиять на код бизнес-логики, если это не оправдано пользовательскими сценариями.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Все перечисленные проблемы мы можем переформулировать в виде принципов, которых будем придерживаться при проектировании и разработке:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Главной частью приложения должна быть бизнес-логика.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Структура проекта должна отражать суть приложения.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Влияние инфраструктуры, UI и смежных задач должно быть минимально.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Код должно быть легко (и понятно как) тестировать.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Модули должны быть максимально независимы.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Код не должен принуждать к серьёзным решениям на ранних этапах.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Каждый из этих принципов мы развернём в последующих постах и испробуем на практике.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"__N_SSG":true}