{"pageProps":{"id":"programm","meta":{"title":"Программа","publishedAt":"2024-05-01T14:03:00.000Z"},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Программа может быть описана как некий набор инструкций, который говорит компьютеру, что делать. Подобно тому как инструкция говорит, что делать в определённой ситуации, программа говорит компьютеру, как выполнять определённую задачу или решать определённую проблему.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"инструкции\",\n      children: [\"Инструкции\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#инструкции\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Набор инструкций в программе это как пошаговый рецепт блюда, но намного подробней. Можно дополнить [рецепт бутерброда](/knowledge/programming_languages/programming_languages#Как общаться?) с вареньем чтобы компьютеру было понятней что необходимо сделать. Вот только некоторые из дополнений:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Где найти хлеб и варенье?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Что делать если варенье испортилось?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"На какую часть хлеба надо намазывать варенье?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Как понять что варенья достаточно на хлебе?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Как видно из этих вопросов их может быть очень много и абсолютно в разных стилях написаны. Благодаря жизненному опыту человек может понять что фразы «варенье лежит в шкафу» и «варенье хранится в шкафу» одинаковые — человек знает что такое синонимы. Компьютер же обучен ограниченному количеству конструкций, но их достаточно чтобы описать программу абсолютно любой сложности и базовых конструкций всего 6 штук:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Переменные\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Структуры данных\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Операторы\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Условные выражения\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Циклы\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Функции\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"конструкции-языка\",\n      children: [\"Конструкции языка\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#конструкции-языка\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Конструкции в языках программирования это основные строительные блоки, из которых составляются программы. Давайте представим, что вы строите что-то с помощью конструктора или строительного набора. Каждый элемент набора выполняет определенную функцию и соединяется с другими элементами для создания конечного продукта.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"переменные\",\n      children: [\"Переменные\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#переменные\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Можно представить переменные как определенное место на складе, где хранится какая-нибудь вещь. Каждое место на складе имеет свое название или номер. Ты можешь положить на это место что угодно и запомнив название места вернуться к нему позже и то что ты там оставил все еще будет там лежать.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"структуры-данных\",\n      children: [\"Структуры данных\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#структуры-данных\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Структуры данных похожи на переменные, но это более организованный, специализированный способ хранения данных. Если переменная это место на складе, то структура данных это как небольшой склад для похожих данных и инструментов работы с ними. Например, кухня это структура данных — в ней хранятся продукты и инструменты для готовки.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"операторы\",\n      children: [\"Операторы\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#операторы\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Операторы похожи на действия которые мы применяем к вещам в повседневной жизни. Например, намазать варенье на хлеб или проверить что варенье не испортилось. В программировании это обычно символ или слово которое используется для выполнения определенных действий над данными.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"условные-выражения\",\n      children: [\"Условные выражения\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#условные-выражения\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Эти конструкции применяются когда программе надо принять решение в зависимости от ситуации — ответить на вопрос. Это развилка в коде позволяет подстраиваться программе под различные ситуации. Компьютер понимает только вопросы на которые можно ответить «да» — \", _jsx(_components.code, {\n        children: \"1\"\n      }), \"  или «нет» — \", _jsx(_components.code, {\n        children: \"0\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"циклы\",\n      children: [\"Циклы\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#циклы\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Циклы похожи на механизм, который повторяет определённые действия несколько раз. Это как если бы вы делали одно и то же действие снова и снова, пока не выполнится определённое условие. Например, намазывать варенье на хлеб пока не будет «достаточно»\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"функции\",\n      children: [\"Функции\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#функции\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Функция это сохраненный набор инструкций который можно применить в разных ситуациях. Например, у тебя есть готовая инструкция как сходить в магазин и купить какой-нибудь продукт — «Сходить в магазин за ...». Она знает как добраться до магазина, как найти товар, как оплатить его и принести домой. Таким образом можно отправить компьютер в магазин если в процессе приготовления бутерброда он не нашел хлеб или варенье — не надо будет каждый расписывать как сходить в магазин за хлеб и как сходить за вареньем, вместо этого можно просто написать «Сходить в магазин за хлебом» или «Сходить в магазин за вареньем».\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Используя эти базовые конструкции можно объяснить компьютеру как сделать все что угодно\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"__N_SSG":true}