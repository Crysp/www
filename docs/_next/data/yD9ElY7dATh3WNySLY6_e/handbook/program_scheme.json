{"pageProps":{"id":"program_scheme","meta":{"title":"Схема программы","publishedAt":"2024-05-01T16:21:00.000Z"},"content":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    img: \"img\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Схема программы играет довольно важную роль в процессе ее создания, особенно когда ты вообще не знаком с языками программирования.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Представь, что ты планируешь построить дом. Прежде чем начать строить, тебе нужно сделать план, правильно? Ты рисуешь чертежи, на которых показано, как будет выглядеть дом снаружи и внутри, где будут окна, двери, комнаты и т. д. Эти чертежи помогают тебе понять, какие материалы и инструменты понадобятся, и как строить дом.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Точно так же и с программированием. Схемы — это своего рода чертежи для программ. Они помогают разработчикам понять, как будет работать программа, какие части она будет содержать и как они будут взаимодействовать друг с другом.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Преимущество схем в том что они универсальны. Чтобы нарисовать схему программы не обязательно знать языки программирования. Схема это цепочка действий, написанных на обычном языке.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"На этапе проектирования программы можно избавиться от большего количества проблем и ошибок. Потому что, рисуя схему ты думаешь только над решением задачи, а не занимаешься проблемами связанными с языком программирования. При чем новичкам в программировании может быть и не сразу понятно: программа не работает потому что ошибка в логике или ошибка коде.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"создание-схемы\",\n      children: [\"Создание схемы\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#создание-схемы\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Существует несколько видов схем которые используются для проектирования программ. Самым удобным и одновременно простым способом являются \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Flowchart\",\n        children: \"блок-схемы\"\n      }), \". Для создания схемы нужно знать всего лишь несколько блоков.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Блок\"\n          }), _jsx(_components.th, {\n            children: \"Описание\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.img, {\n              src: \"/schemas/flowchart.termination.excalidraw.svg\",\n              alt: \"\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: \"Начало/Конец\"\n            }), _jsx(\"br\", {}), \"Обозначает начало и конец алгоритма соответственно. Начало обычно одно, а точек выхода алгоритма может быть несколько — удачное завершение или например алгоритм завершился с ошибкой.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.img, {\n              src: \"/schemas/flowchart.action.excalidraw.svg\",\n              alt: \"\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: \"Действие\"\n            }), _jsx(\"br\", {}), \"Представляет операции или действия, которые выполняются в алгоритме.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.img, {\n              src: \"/schemas/flowchart.io.excalidraw.svg\",\n              alt: \"\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: \"Ввод-вывод данных\"\n            }), _jsx(\"br\", {}), \"Операция ввода может запросить у пользователя какие-то данные, а операция вывода может отобразить юзеру любую необходимую информацию.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.img, {\n              src: \"/schemas/flowchart.decision.excalidraw.svg\",\n              alt: \"\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: \"Решение (условие)\"\n            }), _jsx(\"br\", {}), \"Блок представляет точку принятия решения в алгоритме, где выполняется проверка условия. В зависимости от результата проверки алгоритм может принять разные пути выполнения.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ну и чтобы сразу разобраться как их применять можно взглянуть на блок-схему бутерброда с вареньем.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/schemas/toast-scheme.excalidraw.svg\",\n      alt: \"\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"практика\",\n      children: [\"Практика\", _jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#практика\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Задачки для практики можно найти на любом сайте с челенджами по коду. Вот только некоторые из них:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://leetcode.com/\",\n          children: \"Leetcode\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.codewars.com/\",\n          children: \"Codewars\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Заходишь на любой такой сайт, выбираешь простые задачи и не важно на каком языке программирования. Но важно чтобы задачка была логическая — чтобы ее можно было решить без использования компьютера.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Несколько подходящих задач:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://leetcode.com/problems/find-the-maximum-achievable-number/description/\",\n          children: \"Найти максимальное достижимое число\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://leetcode.com/problems/convert-the-temperature/description/\",\n          children: \"Конвертер температуры\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.codewars.com/kata/53da3dbb4a5168369a0000fe\",\n          children: \"Четное или нечетное\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.codewars.com/kata/5a3fe3dde1ce0e8ed6000097\",\n          children: \"Определить век по году\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"В качестве проверки можно использовать тестовые данные которые предлагаются на страничке челенджа. Если применив различные входные параметры из задачки в твоей схеме не остается пробелов и процесс идет по задуманному пути, можно поздравить себя с успешным решением задачи.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Для визуализации схем существуют хорошие инструменты:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.figma.com/figjam/\",\n          children: \"Figma Jam\"\n        }), \" — мой фаворит\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://miro.com/\",\n          children: \"Miro\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://draw.io\",\n          children: \"draw.io\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"В общем, схемы помогают разработчикам лучше понять задачу, разбить её на более мелкие части и представить, как эти части будут работать вместе, что помогает нам написать более эффективный и структурированный код. Имея практику в рисовании таких схем, гораздо проще писать программы. Когда схемы будут даваться легко, уже не понадобится их рисовать каждый раз перед тем как писать программу — схема будет сама вырисовываться у тебя в голове и останется ее только закодить.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"__N_SSG":true}